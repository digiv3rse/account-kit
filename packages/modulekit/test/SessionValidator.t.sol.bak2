// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

import "forge-std/Test.sol";
import "forge-std/console2.sol";
import "src/ModuleKit.sol";
import "src/Modules.sol";
import "src/Mocks.sol";

contract SessionValidatorTest is RhinestoneModuleKit, Test {
    using RhinestoneModuleKitLib for AccountInstance;

    AccountInstance internal instance;

    MockSessionKeyValidator internal sessionValidator;
    bytes32 internal sessionValidatorDigest;
    MockTarget internal target;

    function setUp() public {
        instance = makeAccountInstance("1");
        vm.deal(instance.account, 1 ether);

        sessionValidator = new MockSessionKeyValidator();
        target = new MockTarget();

        sessionValidatorDigest = instance.installSessionKey({
            sessionKeyModule: address(sessionValidator),
            validUntil: type(uint48).max,
            validAfter: 0,
            sessionKeyData: hex"414141414141"
        });
    }

    function test_execWithSessionKey() public {
        instance.exec4337({
            target: address(target),
            value: 0,
            callData: abi.encodeCall(MockTarget.set, (123)),
            sessionKeyDigest: sessionValidatorDigest,
            sessionKeySignature: hex"414141414141"
        });

        assertEq(target.value(), 123);
    }
}
